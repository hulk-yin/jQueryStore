{"tagline":"","name":"Jquerystore","body":"#JQueryStore \r\n\r\n定义jQuery的数据存储统一对象，最初是为解决在Domino环境下 Readviewentires URL命令返回的DXL格式数据，后来参考Dojo的Store 设计重新对Store对象进行了定义，抽出Store API。扩展Memory / LocalStore/DXLStore等对象。\r\n\r\n微博 http://weibo.com/ivy203\r\n##StoreAPI\r\n\r\n对DojoStoreAPI进行的移植  \r\n\r\n###类成员\r\n* [PutDirectives](#Store.PutDirectives)  \r\n* [SortInformation](#Store.SortInformation)  \r\n* [QueryOptions](#Store.QueryOptions)  \r\n* [QueryResults](#Store.QueryResults)  \r\n  * [forEach/each](#Store.QueryResults.forEach)   \r\n  * [filter/grep](#Store.QueryResults.filter)\r\n  * [map](#Store.QueryResults.map)\r\n  * [then](#Store.QueryResults.then)\r\n  * [observe](#Store.QueryResults.observer)\r\n  * [total](#Store.QueryResults.total)\r\n* [Transaction](#Store.Transaction)  \r\n  * [commit](#Store.Transaction.commit)\t\t\r\n  * [abort](#Store.Transaction.abort)\t\t\r\n\r\n###对象成员\r\n\r\n* [idProperty](#idProperty)  \r\n* [queryEngine](#queryEngine)  \r\n* [get](#get)  \r\n* [getIdentity](#getIdentity)  \r\n* [put](#put)  \r\n* [add](#add)  \r\n* [remove](#remove)  \r\n* [query](#query)  \r\n* [transaction](#transaction) \r\n* [getChildren](#getChildren) \r\n* [getMetadata](#getMetadata) \r\n \r\n## 类方法\r\n\r\n<a name=\"Store.PutDirectives\" />\r\n\r\n###Store.PutDirectives(id,before,parent,overwrite)\r\n__Summary__\r\n\r\n\t\t将指令传递给  put() 和 add() ，以更新这两个操作对对象内容的更新和创建 \r\n\r\n__Arguments__\r\n\r\n\t\tid  {String|Number} 如果创建一个新的Store对象，则为对象的id  \r\n\t\tbefore {Object?}  如果存在该对象，则表示将新的对象添加到改对象之前，为null则将新添加对象追加到最后  \r\n\t\tparent {Object?}  在分层存储时，该对象表示要更新的对象的父对象  \r\n\t\toverwrite {Boolean?}  表示是否更新对象，如果为true，则如果对象存在，则更新对，为false则表示无论创建一个新对象。这个方法错误add()的补充\r\n\t\t\r\n---------------------------------------------\r\n\r\n<a name=\"Store.SortInformation\"/>\r\n\r\n###Store.SortInformation(attribute, descending)\r\n\r\n__Summary__\r\n  \r\n\t\t对象排序属性的方式（指定的属性 attribute排序方式）\r\n\r\n__Arguments__\r\n\r\n\t\t attribute {String}\t排序属性名称.   \r\n\t\t descending { Boolean}排序方法，缺省为 flase  \r\n  \r\n----------------------------------------------\r\n\r\n<a name=\"Store.QueryOptions\">\r\n\r\n###Store.QueryOptions(sort,start,count)\r\n\r\n__Summary__\r\n\r\n\t\t用于设置默认查询参数\r\n  \r\n__Arguments__\r\n\r\n\t\tsort {Store.SortInformation[]?} 设置排序方式对象数组  \r\n\t\tstart {Numnber?}  返回记录集和开始处的指针  \r\n\t\tcount {count ?} 返回记录集和长度   \r\n\t\t\r\n----------------------------------------------\r\n\r\n<a name=\"Store.QueryResults\">\r\n\r\n###Store.QueryResults\r\n\r\n__Summary__\r\n\r\n\t\tStore查询返回的记录集，在处理具有延迟调查询时，可以返回一个Promise(参考jQuery.Deferred)。\r\n\t\t在使用过程中，用户不用担心异步处理以及延迟带来的问题\r\n\t\t\r\n  [jQuery.Deferred](http://api.jquery.com/category/deferred-object/)  \r\n\r\n<a name=\"Store.QueryResults.forEach\"/>\r\n\r\n####forEach/each(calllback,thisObject)\r\n\r\n\r\n__Summary__\r\n\r\n\t\t遍历集和，如有是一个promise，则在对象返回后执行遍历.\r\n\t\t此处使用each方法和forEach是方便jQuery开发习惯\r\n\t\t参考：https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/forEach\r\n  \r\n__Arguments__\r\n\r\n\t\tcallback {function} 对每一个元素进行处理的方法\r\n\t\t   \r\n\t\t\r\n\t\tthisObject (object?) callback内作为this使用的对象\r\n\t\t\r\n\r\n<a name=\"Store.QueryResults.filter\"/>\r\n\r\n####filter/grep(calllback,thisObject)\r\n\r\n__Summary__\r\n\r\n\t\t 对返回结果继续条件过滤\r\n\t\t grep是考虑jQuery开发习惯，建议使用 filter \r\n\t\t 参考： https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/filter.\r\n\t\t  \r\n __Arguments__\r\n\r\n\t\tcallback {function} 对每一个元素进行处理的方法，返回true表示保留此元素，返回false表示过滤此元素\r\n\t\t   \r\n\t\t\r\n\t\tthisObject (object?) callback内作为this使用的对象\t\t \r\n \r\n\r\n<a name=\"Store.QueryResults.map\"/>\r\n\r\n####map(calllback,thisObject)\r\n\r\n__Summary__\r\n\r\n\t\t 参考： https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/map.\r\n\t\t  \r\n __Arguments__\r\n\r\n\t\tcallback {function} 对每一个元素进行处理的方法，返回true表示保留此元素，返回false表示过滤此元素\r\n\t\t   \r\n\t\t\r\n\t\tthisObject (object?) callback内作为this使用的对象\t\t\r\n\r\n<a name=\"Store.QueryResults.then\"/>\r\n\r\n####then(callback,errorHandler)\r\n\r\n__Summary__\r\n\r\n\t\t Promise 返回后执行\r\n\t\t  \r\n __Arguments__\r\n\r\n\t\tcallback {function} 要执行的函数  \r\n\t\t\r\n\t\terrorHandler (object?) callback内作为this使用的对象\t\t\r\n\t\t\r\n\r\n<a name=\"Store.QueryResults.observe\"/>\r\n\r\n####observe(listener, includeAllUpdates)\r\n  \r\n__Summary__\r\n\r\n\t\t注册一个查询结果修改的事件（观察者模式）\r\n\t\t\r\n__Arguments__\r\n\r\n\t\tlisterner {Function} 当查询结构进行修改时该函数被调用，具体参考listerner函数的书面  \r\n\t\tincludeAllUpdates {Boolean ?} 表示是否对结果集产生影响，默认为false，既修改不会对结果集和数据顺序等产生任何用心。\r\n\r\n#####listener(object, removedFrom, insertedInto)\r\n\r\n\t\tobject {object} 被修改（创建，修改，删除）的对象参数\r\n\t\tremovedFrom {Number} object 在结果数组的索引. 如果值是-1，对象不再这个结果集和内\r\n\t\tinsertedInto {Number} object 现在在结果数组的索引. 如果值是-1，那么是一个从集和内移除的对象\r\n   \r\n\t\t\r\n  \r\n<a name=\"Store.QueryResults.total\"/>\r\n\r\n####total  \r\n__Summary__\r\n\t\t\r\n\t\t返回一个Number 或者 Promise\r\n  \r\n------------------------------------------------\r\n\r\n\r\n<a name=\"Store.Transaction\"/>\r\n\r\n###Store.Transaction\r\n\r\n__Summary__\r\n\t\t\r\n\t\t一个 transaction 方法返回的对象,表示一事务操作\r\n\r\n<a name=\"Store.Transaction.commit\"/>\r\n\r\n####commit（）\r\n\r\n__Summary__\r\n\r\n\t\t执行一个事务，事务提交失败可能抛出一个错误；在异步模式下会返回一个promise，最终会返回事务执行成功或失败\r\n\t\t\r\n<a name=\"Store.Transaction.abort\"/>\r\n\r\n\r\n####abort(callback, thisObject)\r\n\r\n__Summary__\r\n\r\n\t\t终止一个事务，终止操作失败可能抛出一个错误；在异步模式下会返回一个promise，最终会返回终止操作的成功或失败\r\n \r\n##对象属性\r\n\r\n<a name=\"idProperty\" />\r\n\r\n###idProperty \r\n\r\n__Summary__\r\n\t\t\r\n\t\t如果Store对象具有主见，则表示该属性值是记录的身份标识，记录的该属性值必须唯一 ，Store会根据该属性创建索引\r\n\t\t\r\n\t\t\r\n##对象方法\r\n\r\n\r\n<a name=\"quertEngine\" />\r\n###quertEngine\r\n\r\n__Summary__\r\n\r\n\t\t对Store进行查询的函数/方法，并返回一个结果集合，该方法可以进行替换  \r\n\t\t该方法存在两个参数，第一个为Query Params ，第二关参数为 option 如排序分页等  \r\n\t\t该方法返回一个匹配的数组。 \t\t\r\n\t\tvar query =QueryEngin(query,option)\r\n__Arguments__\r\n\r\n\t\tquery Params {Object} 要查询的条件，查询格式{ name:\"*/habq/hik\",age:{val:16,condition:\">\"},city:\"shanghai\"} \r\n\t\toption\t{Object?}  排序，查询记录数等信息\r\n\t\t\r\n\t\t\r\n\r\n<a name=\"get\" />\r\n###get(id)\r\n\r\n__Summary__\r\n\t\t\t\r\n\t\t根据Identity返回一个记录对象\r\n\t\t\r\n__Arguments__\r\n\t\t\r\n\t\tid {String|Number} Store 记录的 Identitiy\r\n\t\t\r\n\t\treturns { Object} 返回一个记录对象\r\n\r\n<a name=\"getIdentity\" />\r\n###getIdentity(object)\r\n\r\n__Summary__\r\n\r\n\t\t根据一个记录对象返回该记录的Identity\r\n\r\n__Arguments__\r\n\r\n\t\tobject {Obejct} 要查询的Item对象\r\n\t\t\r\n\t\treturns{String|Number}发挥记录对象的Identity\r\n\t\t\r\n\t\r\n<a name=\"put\" />\r\n###put(object,directives)\r\n\r\n__Summary__\r\n\r\n\t\t存入Stores 的记录对象\r\n\r\n__Arguments__\r\n\r\n\t\tobject{object} 要存入度对象\r\n\t\t \r\n\t\tdirectives{Store.PutDirectives}  put 更新制冷对象\r\n\t\t \r\n\t\treturns: {Number|String} \r\n\t\t\r\n<a name=\"add\" /> \r\n###add(object,directives)\r\n\r\n__Summary__\r\n\r\n\t\t存入Stores 的记录对象 ，如果该对象存在，则抛出一个错误\r\n\r\n__Arguments__\r\n\r\n\t\tobject{object} 要存入度对象\r\n\t\t \r\n\t\tdirectives{Store.PutDirectives}  put 更新制冷对象\r\n\t\t \r\n\t\treturns: {Number|String} \r\n\r\n<a name=\"remove\" />\r\n###remove(id)\r\n\r\n__Summary__\r\n\r\n\t\t根据identity 删除Store内地一个记录，该方法会删除记录及Store的索引\r\n\t\t\r\n__Arguments__\r\n\r\n\t\tid {Number|String} 要删除的记录的Identity\r\n\t\t\r\n<a name=\"query\" />\r\n\r\n#query(query,options)\r\n\r\n__Summary__\r\n\t\t\t\t\r\n\t\t查询对象内的记录，但给对象不会给改变，返回查询记录的集合\r\n__Arguments__\r\n\r\n\t\tquery{String|Object|Function} 从Store内进行搜索使用\r\n\t\t\r\n\t\toptions{Store.QueryOptions} 可选参数，用于查询结果集的处理\r\n\t\t\r\n\t\treturns{Store.QueryResults} 查询的结果集合，并扩展了一些方法\r\n__Example__\r\n\r\n\t\t//\t\t给定一个存在的store\r\n\t\t//\r\n\t\t//\t...查找所有属性 primes 为 true的items :\r\n\t\t//\r\n\t\tstore.query({ prime: true }).forEach(function(object){\r\n\t\t\t\t// handle each object\r\n\t\t});\r\n<a name=\"getChildren\" />\r\n###getChildren(parent, options)\r\n\t\r\n__Summary__\r\n\r\n\t\t获取一个对象的子元素\r\n\t\t\r\n__Arguments__\r\n\r\n\t\tparent{object} 要查找的子对象所对应的父对象\r\n\t\t\r\n\t\toptions {Stroe.QueryOptions} 可选参数，用于对资源是的查询\r\n\t\t\r\n\t\treturns {Store.QueryResults} 查询到的子对象的结果集\r\n\t\t\r\n<a name=\"getMetadata\" />\r\n###getMetadata(object)\r\n\r\n__Summary__\r\n\r\n\t返回对象的原始数据\r\n\t\r\n__Arguments__\r\n\r\n\t\tobject {object} 要返回的原始数据对象\r\n \r\n<a name=\"transaction\" />\r\n\r\n###transaction()\r\n\t\r\n __Summary__\r\n \r\n\t\t创建一个新的事务，并返回一个 Store.Transaction 对象","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}